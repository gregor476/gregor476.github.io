{"version":3,"sources":["Images/honeyjar.png","Components/NavBar.js","Components/Shop.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","styled","div","NavItems","NavItem","NavLink","Nav","Fragment","to","Component","DisplayArea","ProductImage","img","ProductWording","ProductTitle","TitleFlavor","Description","Purchase","Shop","src","honeyjar","Title","FlavorText","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,sC,qoCCI3C,IAAMC,EAASC,IAAOC,IAAV,KAYNC,EAAWF,IAAOC,IAAV,KAKRE,EAAUH,YAAOI,IAAPJ,CAAH,KA+CEK,E,iLAnBX,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACP,EAAD,KACE,kBAACG,EAAD,KACE,kBAACC,EAAD,CAASI,GAAE,UAAX,SAGA,kBAACJ,EAAD,CAASI,GAAE,SAAX,QAGA,kBAACJ,EAAD,CAASI,GAAE,QAAX,gB,GAZMC,a,o/DC3ClB,IAAMC,EAAcT,IAAOC,IAAV,KAYXS,EAAeV,IAAOW,IAAV,KAYZC,EAAiBZ,IAAOC,IAAV,KAUdY,EAAeb,IAAOC,IAAV,KAmBZa,EAAcd,IAAOC,IAAV,KAWXc,EAAcf,IAAOC,IAAV,KAYXe,EAAWhB,IAAOC,IAAV,KAyCCgB,E,iLAjBX,OACE,kBAAC,IAAMX,SAAP,KACE,kBAACG,EAAD,KACE,kBAACC,EAAD,CAAcQ,IAAKC,MACnB,kBAACP,EAAD,KACE,kBAACC,EAAD,mBACA,kBAACC,EAAD,8BACA,kBAACC,EAAD,qFAGA,kBAACC,EAAD,wB,GAZOR,a,00BC1FnB,IAAMY,EAAQpB,IAAOC,IAAV,KAuBLoB,EAAarB,IAAOC,IAAV,KAiCDqB,MAff,WACE,OACE,6BACE,kBAACF,EAAD,wBACA,kBAACC,EAAD,kBACA,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,KAAK,KACV,kBAAC,EAAD,UCjDUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACL,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ed0a0713.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/honeyjar.2a642c48.png\";","import React, { Component } from 'react';\nimport styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom'\n\nconst NavBar = styled.div`\n  position: fixed;\n  height: 100px;\n  overflow: hidden;\n  bottom: 0;\n  width: 100%;\n  background: white;\n  box-shadow: 0px 0 25px 25px white;\n  @media(max-width: 768px) {\n    height: 35px;\n  }\n`;\nconst NavItems = styled.div`\n  text-align: center;\n  margin: 0px auto;\n  display: block;\n`;\nconst NavItem = styled(NavLink)`\n  text-decoration: none;\n  color: black;\n  display: inline-block;\n  font-size: 36px;\n  margin: 0 30px;\n  margin-top: 35px;\n  text-align: center;\n\n  @media(max-width: 768px) {\n    font-size: 7vw;\n    margin: 0 6vw;\n  }\n  &:hover {\n    border-bottom-style: solid;\n    border-bottom-width: 2px;\n    border-color: black;\n    cursor: pointer;\n  }\n  &.active {\n    border-bottom-style: solid;\n    border-bottom-width: 2px;\n    border-color: black;\n  }\n`;\n\nclass Nav extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar>\n          <NavItems>\n            <NavItem to={`/about`}>\n                About\n            </NavItem>\n            <NavItem to={`/shop`}>\n                Shop\n            </NavItem>\n            <NavItem to={`/faq`}>\n                F.A.Q\n            </NavItem>\n          </NavItems>\n        </NavBar>\n      </React.Fragment>\n    );\n  }\n}\nexport default Nav;\n","import React, { Component } from 'react';\nimport styled from '@emotion/styled';\nimport honeyjar from '../Images/honeyjar.png';\n\nconst DisplayArea = styled.div`\n\n  margin: 0 auto 30vh auto;\n  width: 100%;\n  max-width: 750px;\n\n  @media(max-width: 768px) {\n    width: 96%;\n    left: 1%;\n    margin: 0 auto;\n  }\n`;\nconst ProductImage = styled.img`\n  float: left;\n  width: 400px;\n  margin: 0 0 40px 0;\n\n  @media(max-width: 768px) {\n    float: none;\n    width: 55%;\n    margin: 0 auto;\n    display: block;\n  }\n`;\nconst ProductWording = styled.div`\n  float: right;\n  margin-top: 100px;\n\n  @media(max-width: 768px) {\n    float: none;\n    text-align: center;\n    margin: 4vw auto 0 auto;\n  }\n`;\nconst ProductTitle = styled.div`\n  font-size: 42px;\n  font-weight: bold;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-color: black;\n  width: 240px;\n  text-align: left;\n  margin: 0 4px;\n  padding: 0 4px;\n\n  @media(max-width: 768px) {\n    font-size: 8vw;\n    text-align: center;\n    margin: 0px auto;\n    width: 70%;\n  }\n  \n`;\nconst TitleFlavor = styled.div`\n  font-size: 32px;\n  color: #525050;\n  margin: 4px;\n  @media(max-width: 768px) {\n    font-size: 5vw;\n    text-align: center;\n    margin: 4px auto;\n    width: 90%;\n  }\n`;\nconst Description = styled.div`\n  font-size: 24px;\n  width: 300px;\n  margin: 4px;\n  @media(max-width: 768px) {\n    font-size: 6vw;\n    text-align: center;\n    margin: 4px auto;\n    width: 90%;\n  }\n`;\n\nconst Purchase = styled.div`\n  text-decoration: none;\n  text-align: center;\n  border-radius: 28px;\n  border-style: solid;\n  border-width: 2px;\n  border-color: black;\n\n  margin: 40px 0;\n  padding: 8px 0;\n  font-size: 32px;\n\n  &:hover {\n    background-color: #fcdf03;\n    cursor: pointer;\n  }\n  @media(max-width: 768px) {\n    margin: 4vw auto 100px auto;\n    width: 80%;\n  }\n  \n`;\nclass Shop extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <DisplayArea>\n          <ProductImage src={honeyjar}/>\n          <ProductWording>\n            <ProductTitle>Pure Honey</ProductTitle>\n            <TitleFlavor>From bear Lake Valley</TitleFlavor>\n            <Description>\n              This honey is all natural, organic, raw unpasteurized mountain flower honey.\n            </Description>\n            <Purchase>Purchase</Purchase>\n          </ProductWording>\n        </DisplayArea>\n      </React.Fragment>\n    );\n  }\n}\nexport default Shop;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { Switch,\n  Route,\n  Link,\n  NavLink,\n  Redirect,\n  useParams,\n  useRouteMatch } from 'react-router-dom';\nimport Nav from './Components/NavBar';\nimport Shop from './Components/Shop';\n\nconst Title = styled.div`\n  width: 40%;\n  max-width: 400px;\n  position: absolute;\n  text-align: center;\n  left: 4%;\n  top: 35px;\n  font-size: 48px;\n  color: black;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-color: black;\n\n  @media(max-width: 768px) {\n    position: static;\n    font-size: 8vw;\n    text-align: center;\n    width: 300px;\n    margin: 4px auto;\n    padding: 0;\n    text-align: center;\n  }\n`;\nconst FlavorText = styled.div`\n  position: absolute;\n  right: 4%;\n  top: 50px;\n  font-style: italic;\n  color: grey;\n\n  @media(max-width: 768px) {\n    font-size: 3vw;\n    position: static;\n    text-align: center;\n    width: 100px;\n    margin: 4px auto;\n    padding: 0;\n    text-align: center;\n  }\n`;\n\nfunction App() {\n  return (\n    <div>\n      <Title>Bear Lake Honey</Title>\n      <FlavorText>Bee Happy</FlavorText>\n      <Nav/>\n      <Switch >\n        <Route path=\"/\">\n          <Shop/>\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n    <HashRouter>\n      <App />\n    </HashRouter>,\n    document.getElementById('root')\n  );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}