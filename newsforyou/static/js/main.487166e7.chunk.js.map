{"version":3,"sources":["App.js","API/newsapi.js","serviceWorker.js","index.js"],"names":["Article","styled","a","Words","div","Title","p","Description","Img","img","App","state","articles","this","getData","console","debug","axios","all","get","then","spread","data","setState","Fragment","nonoWords","str","print","i","length","j","description","title","toLowerCase","includes","push","key","href","url","src","urlToImage","alt","displayArticles","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6lCAKA,IAAMA,EAAUC,IAAOC,EAAV,KAOPC,EAAQF,IAAOG,IAAV,KAKLC,EAAQJ,IAAOK,EAAV,KAKLC,EAAcN,IAAOK,EAAV,KAQXE,EAAMP,IAAOQ,IAAV,K,IAmEMC,E,4MA3BbC,MAAQ,CACNC,SAAU,M,kEAGVC,KAAKC,Y,kKCnEPC,QAAQC,MAAM,uBACPC,IACJC,IAAI,CALPD,IAAME,IAAI,uGAAmF,CAAC,8BAA+B,QAM1HC,KACCH,IAAMI,QAAO,SAACT,GACZ,MAAO,CACLA,SAAUA,EAASU,U,gBDgEjBV,E,EAAAA,SACRC,KAAKU,SAAS,CAAEX,a,qIAGR,IACDA,EAAYC,KAAKF,MAAjBC,SACP,OACE,kBAAC,IAAMY,SAAP,KACGZ,EACC,kBAAC,IAAMY,SAAP,KAhDV,SAAyBZ,GAIvB,IAHA,IAAMa,EAAY,CAAC,QAAS,QAAS,OAAQ,QAAS,SAAU,SAAU,cAAe,QAAS,OAAQ,cAAe,MAAO,aAAc,OAC1IC,EAAM,GACNC,GAAQ,EACHC,EAAI,EAAGA,EAAIhB,EAASiB,OAAQD,IAAK,CACxC,IAAK,IAAIE,EAAI,EAAGA,EAAIL,EAAUI,OAAQC,IAChClB,EAASgB,GAAGG,aAAenB,EAASgB,GAAGI,SACsB,IAA3DpB,EAASgB,GAAGI,MAAMC,cAAcC,SAAST,EAAUK,MACiB,IAAjElB,EAASgB,GAAGG,YAAYE,cAAcC,SAAST,EAAUK,MAC5DH,GAAQ,IAGZA,GACFD,EAAIS,KAEF,kBAACnC,EAAD,CAASoC,IAAOR,EAAGS,KAAMzB,EAASgB,GAAGU,KACnC,kBAAC9B,EAAD,CAAK+B,IAAK3B,EAASgB,GAAGY,WAAYC,IAAI,WACtC,kBAACtC,EAAD,KACE,kBAACE,EAAD,KAAQO,EAASgB,GAAGI,OACpB,kBAACzB,EAAD,KAAcK,EAASgB,GAAGG,gBAOlCJ,GAAQ,EAEV,OAAOD,EAqBIgB,CAAgB9B,EAASA,WAG5B,+C,GArBQ+B,aEzDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.487166e7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport styled from '@emotion/styled';\nimport { getArticles } from './API/newsapi';\n\nconst Article = styled.a `\n  text-decoration: none;\n  width: 100%;\n  color: white;\n  text-align: center;\n\n`;\nconst Words = styled.div `\n  position: relative;\n  margin: 0 auto;\n  width: 90%;\n`;\nconst Title = styled.p `\n  font-weight: bold;\n  font-size: 4vw; \n\n`;\nconst Description = styled.p `\n  font-size: 4vw;\n  font-style: italic;\n  padding-bottom: 10px;\n  border-bottom: solid;\n  border-bottom-color: grey;\n  border-bottom-width: 1px;\n`;\nconst Img = styled.img `\n  object-fit: cover;\n  width: 100%;\n  height: 40vw;\n  padding: 0 0;\n  margin: 0 auto;\n\n`;\nfunction displayArticles(articles) {\n  const nonoWords = [\"trump\", \"covid\", \"fake\", \"black\", \"police\", \"racism\", \"republicans\", \"biden\", \"riot\", \"coronavirus\", \"cnn\", \"huffington\", \"vox\"];\n  var str = [];\n  var print = true;\n  for (var i = 0; i < articles.length; i++) {\n    for (var j = 0; j < nonoWords.length; j++) {\n      if (articles[i].description && articles[i].title)\n        if (articles[i].title.toLowerCase().includes(nonoWords[j]) === true \n            || articles[i].description.toLowerCase().includes(nonoWords[j]) === true) {\n            print = false\n        }\n    }\n    if (print) {\n      str.push( \n        \n        <Article key = {i} href={articles[i].url}>\n          <Img src={articles[i].urlToImage} alt=\"No Img\"/>\n          <Words>\n            <Title>{articles[i].title}</Title>\n            <Description>{articles[i].description}</Description>\n          </Words>\n          \n        </Article>\n\n      );\n    }\n    print = true;\n  }\n  return str;\n}\n\nclass App extends Component {\n  state = {\n    articles: null\n  };\n  componentDidMount() {\n    this.getData();\n  }\n  async getData() {\n    const { articles } = await getArticles();\n    this.setState({ articles });\n  }\n  \n  render() {\n    const {articles} = this.state;\n    return (\n      <React.Fragment>\n        {articles ? (\n          <React.Fragment>\n            {displayArticles(articles.articles)}\n          </React.Fragment>\n        ) : (\n          <h1>Loading...</h1>\n        )}\n      </React.Fragment>  \n    );\n  }\n}\n\nexport default App;","import axios from 'axios';\nconst key = '80fc18dc29434ee782d8e09d6aec240f';\n\nexport const getNews = () => \n  axios.get('https://newsapi.org/v2/top-headlines?country=us&apiKey=' + key + '&pageSize=100', {'Access-Control-Allow-Origin': '*'});\n\nexport const getArticles = () => {\n  console.debug(\"== Getting Articles\");\n  return axios\n    .all([getNews()])\n    .then(\n      axios.spread((articles) => {\n        return {\n          articles: articles.data\n        };\n      }),\n    );\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}